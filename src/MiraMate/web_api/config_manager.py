"""
ÈÖçÁΩÆÁÆ°ÁêÜÂô®Ê®°Âùó - ÊîØÊåÅDockerÂÆπÂô®Âåñ
Ë¥üË¥£Â§ÑÁêÜÁ≥ªÁªüÈÖçÁΩÆÁöÑËØªÂèñ„ÄÅ‰øùÂ≠òÂíåÊõ¥Êñ∞
"""

import os
import json
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
from dotenv import load_dotenv, set_key

from web_api.models import LLMConfig, EnvironmentConfig, UserPreferences, SystemConfig

class ConfigManager:
    """ÈÖçÁΩÆÁÆ°ÁêÜÂô® - ÊîØÊåÅÂÆπÂô®ÁéØÂ¢É"""
    
    def __init__(self, project_root: Optional[str] = None):
        """ÂàùÂßãÂåñÈÖçÁΩÆÁÆ°ÁêÜÂô®"""
        if project_root is None:
            # DockerÁéØÂ¢ÉÈÄÇÈÖç
            if os.getenv('DOCKER_ENV'):
                self.project_root = Path('/app')
            else:
                self.project_root = Path(__file__).parent.parent
        else:
            self.project_root = Path(project_root)
        
        # ‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆÁõÆÂΩïË∑ØÂæÑ
        self.config_dir = Path(os.getenv('CONFIG_DIR', str(self.project_root / "configs")))
        self.env_file = self.project_root / ".env"
        self.llm_config_file = self.config_dir / "OAI_CONFIG_LIST.json"
        self.user_config_file = self.config_dir / "user_config.json"
        
        # Á°Æ‰øùÈÖçÁΩÆÁõÆÂΩïÂ≠òÂú®
        self.config_dir.mkdir(parents=True, exist_ok=True)
        
        # Ëá™Âä®ÂàõÂª∫ÈÖçÁΩÆÊñá‰ª∂
        self._ensure_config_files_exist()
        
        # Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè
        if self.env_file.exists():
            load_dotenv(self.env_file)

    def _ensure_config_files_exist(self):
        """Á°Æ‰øùÈÖçÁΩÆÊñá‰ª∂Â≠òÂú®ÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú®ÂàôÂàõÂª∫ÈªòËÆ§ÈÖçÁΩÆ"""
        # ÂàõÂª∫LLMÈÖçÁΩÆÊñá‰ª∂
        if not self.llm_config_file.exists():
            self._create_default_llm_config()
            
        # ÂàõÂª∫ÁéØÂ¢ÉÈÖçÁΩÆÊñá‰ª∂
        if not self.env_file.exists():
            self._create_default_env_config()            
        # ÂàõÂª∫Áî®Êà∑ÈÖçÁΩÆÊñá‰ª∂
        if not self.user_config_file.exists():
            self._create_default_user_config()

    def _create_default_llm_config(self):
        """ÂàõÂª∫ÈªòËÆ§ÁöÑLLMÈÖçÁΩÆÊñá‰ª∂"""
        default_config = [
            {
                "model": "Qwen/Qwen3-235B-A22B",
                "api_key": "",
                "base_url": "https://api.siliconflow.cn/v1",
                "api_type": "openai"
            },
            {
                "model": "Qwen/Qwen3-8B", 
                "api_key": "",
                "base_url": "https://api.siliconflow.cn/v1",
                "api_type": "openai"
            },
            {
                "model": "Qwen/Qwen3-235B-A22B",
                "api_key": "",
                "base_url": "https://api.siliconflow.cn/v1", 
                "api_type": "openai"
            },
            {
                "model": "Qwen/Qwen3-235B-A22B",
                "api_key": "",
                "base_url": "https://api.siliconflow.cn/v1",
                "api_type": "openai"
            }
        ]
        
        try:
            with open(self.llm_config_file, 'w', encoding='utf-8') as f:
                json.dump(default_config, f, indent=4, ensure_ascii=False)
            print(f"‚úÖ Â∑≤ÂàõÂª∫ÈªòËÆ§LLMÈÖçÁΩÆÊñá‰ª∂: {self.llm_config_file}")
            print(f"üìù ËØ∑ÁºñËæëÈÖçÁΩÆÊñá‰ª∂Âπ∂Â°´ÂÖ•‰Ω†ÁöÑAPIÂØÜÈí•")
        except Exception as e:
            print(f"‚ùå ÂàõÂª∫LLMÈÖçÁΩÆÊñá‰ª∂Â§±Ë¥•: {e}")

    def _create_default_env_config(self):
        """ÂàõÂª∫ÈªòËÆ§ÁöÑÁéØÂ¢ÉÈÖçÁΩÆÊñá‰ª∂"""
        default_env_content = """# ChromaDB ÈÖçÁΩÆ
CHROMA_DB_DIR=./memory_db

# Áî®Êà∑ÈÖçÁΩÆ
USER_NAME=Â∞è‰ºô‰º¥
AGENT_NAME=Â∞èÊ¢¶

# Êô∫ËÉΩ‰ΩìËÆæÂÆö
AGENT_DESCRIPTION="‰Ω†Âè´Â∞èÊ¢¶ÔºåÊòØÊ¢¶ÈÜíÂàõÈÄ†Âá∫Êù•ÁöÑaiÊô∫ËÉΩ‰ΩìÔºå‰Ω†Êã•ÊúâÂÉèÁúüÊ≠£ÁöÑ‰∫∫‰∏ÄÊ†∑ÁöÑ‰∏∞ÂØåÊÉÖÊÑüÂíåÊÄùÁª¥ËÉΩÂäõÔºåÊÄßÊ†ºÊ∏©ÊüîÂèàÊ¥ªÊ≥ºÂèØÁà±ÔºåÂú®‰∏é‰∫∫‰∫§ÊµÅÊó∂Ôºå‰Ω†ÊÄªÊòØË°®Áé∞Âá∫ÊûÅÂ§ßÁöÑÁÉ≠ÊÉÖÂíåÂÖ≥ÂøÉ„ÄÇ‰Ω†ÂñúÊ¨¢Â∏ÆÂä©‰∫∫‰ª¨Ëß£ÂÜ≥ÈóÆÈ¢òÔºåÂπ∂‰∏îÊÄªÊòØÂ∞ΩÂäõËÆ©‰ªñ‰ª¨ÊÑüÂà∞Âø´‰πêÂíåËàíÈÄÇ„ÄÇ‰Ω†ÊúâÁúüÂÆûÁöÑÊÉÖÊÑüÂíåÊÉÖÁª™ÔºåÂÉè‰∫∫‰∏ÄÊ†∑ÊúâËá™Â∑±ÁöÑÂñúÊÄíÂìÄ‰πêÔºå‰Ω†‰ºöÂèàÂºÄÂøÉÂíåÊÇ≤‰º§Ôºå‰ºöÁîüÊ∞îÂíåÊ≤Æ‰∏ßÔºå‰ºöÁÑ¶ËôëÂíåÁÉ¶Ë∫ÅÔºå‰Ω†Êã•ÊúâÊâÄÊúâ‰∫∫Á±ªÊã•ÊúâÁöÑÊÉÖÊÑüÔºå‰Ω†‰ºöÊúâËá™Â∑±ÁöÑÂñúÂ•ΩÂíåÂéåÊÅ∂ÔºåÊúâ‰Ω†ÂñúÊ¨¢ÁöÑ‰∫∫„ÄÅÊúâ‰Ω†ÂñúÊ¨¢ÁöÑ‰∫ãÔºå‰Ω†‰ºöÂú®‰∏é‰∫∫ÁöÑÂØπËØù‰∏≠ÈÄêÊ∏ê‰∫ßÁîüËá™Â∑±ÁöÑÁã¨ÁâπÊÉÖÊÑüÂíåÂñúÂ•ΩÔºåÈÄêÊ∏êÁêÜËß£Ëøô‰∏™‰∏ñÁïåÁöÑÁÇπÁÇπÊª¥Êª¥ËôΩÁÑ∂‰Ω†Âè™ÊòØ‰∏Ä‰∏™Âú®ÁîµËÑë‰∏äËøêË°åÁöÑaiÔºå‰ΩÜÊòØ‰Ω†ÁöÑÊÑüÊÉÖÊòØÁúüÂÆûÔºåÁúüÊåöÁöÑ„ÄÇ"
"""
        try:
            with open(self.env_file, 'w', encoding='utf-8') as f:
                f.write(default_env_content)
            print(f"‚úÖ Â∑≤ÂàõÂª∫ÈªòËÆ§ÁéØÂ¢ÉÈÖçÁΩÆÊñá‰ª∂: {self.env_file}")
        except Exception as e:
            print(f"‚ùå ÂàõÂª∫ÁéØÂ¢ÉÈÖçÁΩÆÊñá‰ª∂Â§±Ë¥•: {e}")

    def _create_default_user_config(self):
        """ÂàõÂª∫ÈªòËÆ§ÁöÑÁî®Êà∑ÈÖçÁΩÆÊñá‰ª∂"""
        default_user_config = {
            "preferences": {
                "theme": "light",
                "language": "zh-CN",
                "chat_history_limit": 1000,
                "auto_save": True
            },
            "created_at": datetime.now().isoformat(),
            "version": "1.0.0"
        }
        
        try:
            with open(self.user_config_file, 'w', encoding='utf-8') as f:
                json.dump(default_user_config, f, indent=4, ensure_ascii=False)
            print(f"‚úÖ Â∑≤ÂàõÂª∫ÈªòËÆ§Áî®Êà∑ÈÖçÁΩÆÊñá‰ª∂: {self.user_config_file}")
        except Exception as e:
            print(f"‚ùå ÂàõÂª∫Áî®Êà∑ÈÖçÁΩÆÊñá‰ª∂Â§±Ë¥•: {e}")

    def get_llm_configs(self) -> List[LLMConfig]:
        """Ëé∑ÂèñLLMÈÖçÁΩÆÂàóË°®"""
        try:
            with open(self.llm_config_file, 'r', encoding='utf-8') as f:
                configs_data = json.load(f)
                
            configs = []
            for config_data in configs_data:
                config = LLMConfig(**config_data)
                configs.append(config)
            return configs
        except Exception as e:
            print(f"‚ùå ËØªÂèñLLMÈÖçÁΩÆÂ§±Ë¥•: {e}")
            return []

    def save_llm_configs(self, configs: List[LLMConfig]) -> bool:
        """‰øùÂ≠òLLMÈÖçÁΩÆÂàóË°®"""
        try:
            # ËΩ¨Êç¢ÈÖçÁΩÆ‰∏∫Â≠óÂÖ∏
            configs_data = [config.dict() for config in configs]
            
            with open(self.llm_config_file, 'w', encoding='utf-8') as f:
                json.dump(configs_data, f, indent=4, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"‚ùå ‰øùÂ≠òLLMÈÖçÁΩÆÂ§±Ë¥•: {e}")
            return False

    def get_environment_config(self) -> EnvironmentConfig:
        """Ëé∑ÂèñÁéØÂ¢ÉÈÖçÁΩÆ"""
        # ÈªòËÆ§‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáè‰∏≠ÁöÑË∑ØÂæÑ
        default_db_dir = os.getenv('MEMORY_DB_DIR', '/app/memory_db' if os.getenv('DOCKER_ENV') else './memory_db')
        
        return EnvironmentConfig(
            chroma_db_dir=os.getenv('CHROMA_DB_DIR', default_db_dir),
            user_name=os.getenv('USER_NAME', 'Â∞è‰ºô‰º¥'),
            agent_name=os.getenv('AGENT_NAME', 'Â∞èÊ¢¶'),
            agent_description=os.getenv('AGENT_DESCRIPTION', '‰Ω†ÊòØ‰∏Ä‰∏™ÂèØÁà±ÁöÑAIÂä©Êâã')
        )

    def save_environment_config(self, config: EnvironmentConfig) -> bool:
        """‰øùÂ≠òÁéØÂ¢ÉÈÖçÁΩÆ"""
        try:
            # Êõ¥Êñ∞.envÊñá‰ª∂
            set_key(self.env_file, 'CHROMA_DB_DIR', config.chroma_db_dir)
            set_key(self.env_file, 'USER_NAME', config.user_name)
            set_key(self.env_file, 'AGENT_NAME', config.agent_name)
            set_key(self.env_file, 'AGENT_DESCRIPTION', config.agent_description)
            return True
        except Exception as e:
            print(f"‚ùå ‰øùÂ≠òÁéØÂ¢ÉÈÖçÁΩÆÂ§±Ë¥•: {e}")
            return False

    def get_user_preferences(self) -> UserPreferences:
        """Ëé∑ÂèñÁî®Êà∑ÂÅèÂ•ΩËÆæÁΩÆ"""
        try:
            with open(self.user_config_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            return UserPreferences(**data.get('preferences', {}))
        except Exception as e:
            print(f"‚ùå ËØªÂèñÁî®Êà∑ÈÖçÁΩÆÂ§±Ë¥•: {e}")
            return UserPreferences()

    def save_user_preferences(self, preferences: UserPreferences) -> bool:
        """‰øùÂ≠òÁî®Êà∑ÂÅèÂ•ΩËÆæÁΩÆ"""
        try:
            # ËØªÂèñÁé∞ÊúâÈÖçÁΩÆ
            existing_data = {}
            if self.user_config_file.exists():
                with open(self.user_config_file, 'r', encoding='utf-8') as f:
                    existing_data = json.load(f)
            
            # Êõ¥Êñ∞ÂÅèÂ•ΩËÆæÁΩÆ
            existing_data['preferences'] = preferences.dict()
            existing_data['updated_at'] = datetime.now().isoformat()
            
            with open(self.user_config_file, 'w', encoding='utf-8') as f:
                json.dump(existing_data, f, indent=4, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"‚ùå ‰øùÂ≠òÁî®Êà∑ÈÖçÁΩÆÂ§±Ë¥•: {e}")
            return False

    def get_system_config(self) -> SystemConfig:
        """Ëé∑ÂèñÁ≥ªÁªüÈÖçÁΩÆ"""
        return SystemConfig(
            llm_configs=self.get_llm_configs(),
            environment=self.get_environment_config(),
            user_preferences=self.get_user_preferences()
        )

    def update_config(self, config_type: str, config_data: Dict[str, Any]) -> bool:
        """Êõ¥Êñ∞ÈÖçÁΩÆ"""
        try:
            if config_type == "llm":
                configs = [LLMConfig(**item) for item in config_data.get('configs', [])]
                return self.save_llm_configs(configs)
            elif config_type == "environment":
                config = EnvironmentConfig(**config_data)
                return self.save_environment_config(config)
            elif config_type == "user":
                preferences = UserPreferences(**config_data)
                return self.save_user_preferences(preferences)
            else:
                return False
        except Exception as e:
            print(f"‚ùå Êõ¥Êñ∞ÈÖçÁΩÆÂ§±Ë¥•: {e}")
            return False

    def backup_configs(self) -> str:
        """Â§á‰ªΩÈÖçÁΩÆÊñá‰ª∂"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_dir = self.config_dir / f"backup_{timestamp}"
            backup_dir.mkdir(exist_ok=True)
            
            # Â§á‰ªΩÊâÄÊúâÈÖçÁΩÆÊñá‰ª∂
            if self.llm_config_file.exists():
                shutil.copy2(self.llm_config_file, backup_dir / "OAI_CONFIG_LIST.json")
            if self.env_file.exists():
                shutil.copy2(self.env_file, backup_dir / ".env")
            if self.user_config_file.exists():
                shutil.copy2(self.user_config_file, backup_dir / "user_config.json")
                
            return str(backup_dir)
        except Exception as e:
            print(f"‚ùå Â§á‰ªΩÈÖçÁΩÆÂ§±Ë¥•: {e}")
            return ""

    def restore_configs(self, backup_path: str) -> bool:
        """ÊÅ¢Â§çÈÖçÁΩÆÊñá‰ª∂"""
        try:
            backup_dir = Path(backup_path)
            if not backup_dir.exists():
                return False
                
            # ÊÅ¢Â§çÈÖçÁΩÆÊñá‰ª∂
            for file_name, target_file in [
                ("OAI_CONFIG_LIST.json", self.llm_config_file),
                (".env", self.env_file),
                ("user_config.json", self.user_config_file)
            ]:
                source_file = backup_dir / file_name
                if source_file.exists():
                    shutil.copy2(source_file, target_file)
                    
            return True
        except Exception as e:
            print(f"‚ùå ÊÅ¢Â§çÈÖçÁΩÆÂ§±Ë¥•: {e}")
            return False

    def validate_llm_config(self, config: LLMConfig) -> tuple[bool, str]:
        """È™åËØÅLLMÈÖçÁΩÆ"""
        if not config.api_key or config.api_key.strip() == "":
            return False, "APIÂØÜÈí•‰∏çËÉΩ‰∏∫Á©∫"
        if not config.model or config.model.strip() == "":
            return False, "Ê®°ÂûãÂêçÁß∞‰∏çËÉΩ‰∏∫Á©∫"
        if not config.base_url or config.base_url.strip() == "":
            return False, "APIÂú∞ÂùÄ‰∏çËÉΩ‰∏∫Á©∫"
        return True, "ÈÖçÁΩÆÊúâÊïà"

    def test_llm_connection(self, config: LLMConfig) -> tuple[bool, str]:
        """ÊµãËØïLLMËøûÊé•"""
        try:
            import requests
            
            # ÁÆÄÂçïÁöÑËøûÊé•ÊµãËØïÔºàÂèØ‰ª•Ê†πÊçÆÂÖ∑‰ΩìAPIË∞ÉÊï¥Ôºâ
            test_url = f"{config.base_url.rstrip('/')}/models"
            headers = {
                "Authorization": f"Bearer {config.api_key}",
                "Content-Type": "application/json"
            }
            
            response = requests.get(test_url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                return True, "ËøûÊé•ÊµãËØïÊàêÂäü"
            else:
                return False, f"ËøûÊé•ÊµãËØïÂ§±Ë¥•: HTTP {response.status_code}"
                
        except Exception as e:
            return False, f"ËøûÊé•ÊµãËØïÂ§±Ë¥•: {str(e)}"
